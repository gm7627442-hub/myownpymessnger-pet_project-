import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import socket
import threading
import json
import time
from datetime import datetime

class AdminControlPanel:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å - –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä")
        self.root.geometry("1000x700")
        self.root.configure(bg='#1e1e1e')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.socket = None
        self.connected = False
        self.username = "admin"
        self.server_stats = {}
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_login_frame()
        self.create_admin_panel()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ª–æ–≥–∏–Ω–∞
        self.show_login()
        
    def create_login_frame(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        self.login_frame = tk.Frame(self.root, bg='#1e1e1e')
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            self.login_frame,
            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
            font=('Arial', 20, 'bold'),
            fg='white',
            bg='#1e1e1e'
        )
        title_label.pack(pady=30)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        input_frame = tk.Frame(self.login_frame, bg='#1e1e1e')
        input_frame.pack(pady=20)
        
        # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ admin)
        tk.Label(
            input_frame,
            text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:",
            font=('Arial', 12),
            fg='white',
            bg='#1e1e1e'
        ).grid(row=0, column=0, padx=5, pady=10, sticky='e')
        
        admin_label = tk.Label(
            input_frame,
            text="admin",
            font=('Arial', 12, 'bold'),
            fg='#4CAF50',
            bg='#1e1e1e'
        )
        admin_label.grid(row=0, column=1, padx=5, pady=10, sticky='w')
        
        # –ü–∞—Ä–æ–ª—å
        tk.Label(
            input_frame,
            text="–ü–∞—Ä–æ–ª—å:",
            font=('Arial', 12),
            fg='white',
            bg='#1e1e1e'
        ).grid(row=1, column=0, padx=5, pady=10, sticky='e')
        
        self.password_entry = tk.Entry(
            input_frame,
            font=('Arial', 12),
            width=20,
            show='*'
        )
        self.password_entry.grid(row=1, column=1, padx=5, pady=10)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(self.login_frame, bg='#1e1e1e')
        button_frame.pack(pady=20)
        
        self.login_btn = tk.Button(
            button_frame,
            text="–í–æ–π—Ç–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            font=('Arial', 12, 'bold'),
            bg='#4CAF50',
            fg='white',
            width=20,
            command=self.login
        )
        self.login_btn.pack(pady=10)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = tk.Label(
            self.login_frame,
            text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ",
            font=('Arial', 10),
            fg='red',
            bg='#1e1e1e'
        )
        self.status_label.pack(pady=10)
        
        # –ë–∏–Ω–¥ Enter –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞
        self.root.bind('<Return>', lambda event: self.login())
        
    def create_admin_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        self.admin_frame = tk.Frame(self.root, bg='#1e1e1e')
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        top_frame = tk.Frame(self.admin_frame, bg='#2b2b2b')
        top_frame.pack(fill='x', padx=10, pady=5)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ
        self.server_info_label = tk.Label(
            top_frame,
            text="–°–µ—Ä–≤–µ—Ä: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ | –í—Ä–µ–º—è: --:--:--",
            font=('Arial', 10),
            fg='white',
            bg='#2b2b2b'
        )
        self.server_info_label.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞
        self.logout_btn = tk.Button(
            top_frame,
            text="–í—ã–π—Ç–∏",
            font=('Arial', 10),
            bg='#f44336',
            fg='white',
            command=self.logout
        )
        self.logout_btn.pack(side='right')
        
        # –ü–∞–Ω–µ–ª—å –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = tk.Frame(self.admin_frame, bg='#1e1e1e')
        actions_frame.pack(fill='x', padx=10, pady=5)
        
        actions = [
            ("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", self.refresh_stats),
            ("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", self.refresh_users),
            ("üì¢ –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", self.send_system_message),
            ("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", self.restart_server),
            ("üö™ –í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", self.shutdown_server)
        ]
        
        for text, command in actions:
            btn = tk.Button(
                actions_frame,
                text=text,
                font=('Arial', 9),
                bg='#333333',
                fg='white',
                command=command
            )
            btn.pack(side='left', padx=2)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.notebook = ttk.Notebook(self.admin_frame)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –°—Ç–∏–ª—å –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        style = ttk.Style()
        style.configure("TNotebook", background='#1e1e1e')
        style.configure("TNotebook.Tab", background='#333333', foreground='white')
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        self.stats_tab = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(self.stats_tab, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        self.create_stats_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.users_tab = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(self.users_tab, text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
        
        self.create_users_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ö–æ–º–Ω–∞—Ç—ã
        self.rooms_tab = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(self.rooms_tab, text="üí¨ –ö–æ–º–Ω–∞—Ç—ã")
        
        self.create_rooms_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitor_tab = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(self.monitor_tab, text="üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        
        self.create_monitor_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 5: –õ–æ–≥–∏
        self.logs_tab = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(self.logs_tab, text="üìã –õ–æ–≥–∏")
        
        self.create_logs_tab()
    
    def create_stats_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_frame = tk.Frame(self.stats_tab, bg='#1e1e1e')
        metrics_frame.pack(fill='x', padx=10, pady=10)
        
        self.metrics_text = scrolledtext.ScrolledText(
            metrics_frame,
            wrap=tk.WORD,
            width=80,
            height=15,
            bg='#2b2b2b',
            fg='white',
            font=('Consolas', 10),
            state='disabled'
        )
        self.metrics_text.pack(fill='both', expand=True)
        
        # –ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(self.stats_tab, bg='#1e1e1e')
        button_frame.pack(fill='x', padx=10, pady=5)
        
        tk.Button(
            button_frame,
            text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ë–î",
            font=('Arial', 10),
            bg='#2196F3',
            fg='white',
            command=self.refresh_stats
        ).pack(side='left', padx=5)
        
        tk.Button(
            button_frame,
            text="–û—á–∏—Å—Ç–∏—Ç—å",
            font=('Arial', 10),
            bg='#ff9800',
            fg='white',
            command=self.clear_stats
        ).pack(side='left', padx=5)
    
    def create_users_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω
        online_frame = tk.Frame(self.users_tab, bg='#1e1e1e')
        online_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        tk.Label(
            online_frame,
            text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω:",
            font=('Arial', 11, 'bold'),
            fg='white',
            bg='#1e1e1e'
        ).pack(anchor='w')
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π
        list_action_frame = tk.Frame(online_frame, bg='#1e1e1e')
        list_action_frame.pack(fill='both', expand=True, pady=5)
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.users_listbox = tk.Listbox(
            list_action_frame,
            bg='#2b2b2b',
            fg='white',
            selectbackground='#2196F3',
            font=('Arial', 10)
        )
        self.users_listbox.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        # –ü–∞–Ω–µ–ª—å –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = tk.Frame(list_action_frame, bg='#1e1e1e')
        action_buttons.pack(side='right', fill='y')
        
        actions = [
            ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self.refresh_users),
            ("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", self.send_user_message),
            ("üö™ –û—Ç–∫–ª—é—á–∏—Ç—å", self.disconnect_user),
            ("‚è∞ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", self.ban_user),
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", self.user_stats)
        ]
        
        for text, command in actions:
            btn = tk.Button(
                action_buttons,
                text=text,
                font=('Arial', 9),
                bg='#333333',
                fg='white',
                width=18,
                command=command
            )
            btn.pack(pady=2)
    
    def create_rooms_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç–∞–º–∏"""
        rooms_frame = tk.Frame(self.rooms_tab, bg='#1e1e1e')
        rooms_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
        tk.Label(
            rooms_frame,
            text="–ö–æ–º–Ω–∞—Ç—ã —á–∞—Ç–∞:",
            font=('Arial', 11, 'bold'),
            fg='white',
            bg='#1e1e1e'
        ).pack(anchor='w')
        
        self.rooms_listbox = tk.Listbox(
            rooms_frame,
            bg='#2b2b2b',
            fg='white',
            selectbackground='#4CAF50',
            font=('Arial', 10)
        )
        self.rooms_listbox.pack(fill='both', expand=True, pady=5)
        
        # –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–Ω–∞—Ç–∞–º–∏
        room_actions = tk.Frame(rooms_frame, bg='#1e1e1e')
        room_actions.pack(fill='x')
        
        tk.Button(
            room_actions,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã",
            font=('Arial', 9),
            bg='#2196F3',
            fg='white',
            command=self.refresh_rooms
        ).pack(side='left', padx=2)
        
        tk.Button(
            room_actions,
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É",
            font=('Arial', 9),
            bg='#4CAF50',
            fg='white',
            command=self.create_room
        ).pack(side='left', padx=2)
        
        tk.Button(
            room_actions,
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É",
            font=('Arial', 9),
            bg='#f44336',
            fg='white',
            command=self.delete_room
        ).pack(side='left', padx=2)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        create_frame = tk.Frame(rooms_frame, bg='#1e1e1e')
        create_frame.pack(fill='x', pady=5)
        
        tk.Label(
            create_frame,
            text="–ù–æ–≤–∞—è –∫–æ–º–Ω–∞—Ç–∞:",
            font=('Arial', 9),
            fg='white',
            bg='#1e1e1e'
        ).pack(side='left')
        
        self.new_room_entry = tk.Entry(
            create_frame,
            font=('Arial', 9),
            width=20
        )
        self.new_room_entry.pack(side='left', padx=5)
        self.new_room_entry.bind('<Return>', lambda e: self.create_room())
    
    def create_monitor_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        monitor_frame = tk.Frame(self.monitor_tab, bg='#1e1e1e')
        monitor_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å matplotlib)
        tk.Label(
            monitor_frame,
            text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            font=('Arial', 11, 'bold'),
            fg='white',
            bg='#1e1e1e'
        ).pack(anchor='w')
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        graph_placeholder = tk.Label(
            monitor_frame,
            text="–ì—Ä–∞—Ñ–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n(–¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ matplotlib)",
            font=('Arial', 14),
            fg='#666666',
            bg='#2b2b2b',
            width=50,
            height=15
        )
        graph_placeholder.pack(fill='both', expand=True, pady=10)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        stats_frame = tk.Frame(monitor_frame, bg='#1e1e1e')
        stats_frame.pack(fill='x')
        
        self.realtime_stats = tk.Label(
            stats_frame,
            text="–ó–∞–≥—Ä—É–∑–∫–∞...",
            font=('Consolas', 9),
            fg='white',
            bg='#1e1e1e',
            justify='left'
        )
        self.realtime_stats.pack(anchor='w')
    
    def create_logs_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ª–æ–≥–æ–≤"""
        logs_frame = tk.Frame(self.logs_tab, bg='#1e1e1e')
        logs_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        tk.Label(
            logs_frame,
            text="–õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞:",
            font=('Arial', 11, 'bold'),
            fg='white',
            bg='#1e1e1e'
        ).pack(anchor='w')
        
        self.logs_text = scrolledtext.ScrolledText(
            logs_frame,
            wrap=tk.WORD,
            width=80,
            height=20,
            bg='#2b2b2b',
            fg='white',
            font=('Consolas', 9),
            state='disabled'
        )
        self.logs_text.pack(fill='both', expand=True, pady=5)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        log_controls = tk.Frame(logs_frame, bg='#1e1e1e')
        log_controls.pack(fill='x')
        
        tk.Button(
            log_controls,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏",
            font=('Arial', 9),
            bg='#2196F3',
            fg='white',
            command=self.refresh_logs
        ).pack(side='left', padx=2)
        
        tk.Button(
            log_controls,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
            font=('Arial', 9),
            bg='#ff9800',
            fg='white',
            command=self.clear_logs
        ).pack(side='left', padx=2)
        
        tk.Button(
            log_controls,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏",
            font=('Arial', 9),
            bg='#4CAF50',
            fg='white',
            command=self.save_logs
        ).pack(side='left', padx=2)
    
    def show_login(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        self.admin_frame.pack_forget()
        self.login_frame.pack(fill='both', expand=True)
        self.password_entry.focus()
    
    def show_admin_panel(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
        self.login_frame.pack_forget()
        self.admin_frame.pack(fill='both', expand=True)
        self.start_monitoring()
    
    def connect_to_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.connect(('localhost', 5555))
            self.connected = True
            self.status_label.config(text="–ü–æ–¥–∫–ª—é—á–µ–Ω–æ", fg='green')
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            receive_thread = threading.Thread(target=self.receive_messages, daemon=True)
            receive_thread.start()
            
            return True
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    def login(self):
        """–í—Ö–æ–¥ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        password = self.password_entry.get().strip()
        
        if not password:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        if not self.connect_to_server():
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤—Ö–æ–¥–∞
        command = f"/login {self.username} {password}"
        self.socket.send(command.encode('utf-8'))
    
    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        if self.socket:
            try:
                self.socket.send("/exit".encode('utf-8'))
                self.socket.close()
            except:
                pass
        
        self.connected = False
        self.stop_monitoring()
        self.show_login()
    
    def receive_messages(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
        while self.connected:
            try:
                data = self.socket.recv(4096).decode('utf-8')
                if not data:
                    break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                self.root.after(0, self.process_message, data)
                
            except Exception as e:
                if self.connected:
                    self.root.after(0, lambda: messagebox.showerror("–û—à–∏–±–∫–∞", f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ: {e}"))
                break
        
        if self.connected:
            self.root.after(0, self.logout)
    
    def process_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if message == "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!":
            self.show_admin_panel()
            self.refresh_stats()
            self.refresh_users()
            self.refresh_rooms()
        
        elif message.startswith("–û—à–∏–±–∫–∞:"):
            messagebox.showerror("–û—à–∏–±–∫–∞", message)
            if self.socket:
                self.socket.close()
            self.connected = False
            self.status_label.config(text="–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ", fg='red')
        
        elif message.startswith("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:"):
            self.display_stats(message)
        
        elif message.startswith("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–Ω–ª–∞–π–Ω:"):
            self.update_users_list(message)
        
        elif message.startswith("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:"):
            self.update_rooms_list(message)
        
        else:
            self.add_to_logs(message)
    
    def display_stats(self, stats):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.metrics_text.config(state='normal')
        self.metrics_text.delete(1.0, tk.END)
        self.metrics_text.insert(tk.END, f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n")
        self.metrics_text.insert(tk.END, stats)
        self.metrics_text.config(state='disabled')
    
    def update_users_list(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.users_listbox.delete(0, tk.END)
        
        lines = message.split('\n')[1:]
        for line in lines:
            if line.startswith('- '):
                username = line[2:].strip()
                if username != self.username:
                    self.users_listbox.insert(tk.END, username)
    
    def update_rooms_list(self, message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç"""
        self.rooms_listbox.delete(0, tk.END)
        
        lines = message.split('\n')[1:]
        for line in lines:
            if line.startswith('- '):
                room_name = line[2:].strip()
                self.rooms_listbox.insert(tk.END, room_name)
    
    def add_to_logs(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∏"""
        self.logs_text.config(state='normal')
        timestamp = datetime.now().strftime('%H:%M:%S')
        self.logs_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.logs_text.see(tk.END)
        self.logs_text.config(state='disabled')
    
    def refresh_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.connected:
            self.socket.send("/debug_db".encode('utf-8'))
    
    def refresh_users(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if self.connected:
            self.socket.send("/users".encode('utf-8'))
    
    def refresh_rooms(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–Ω–∞—Ç"""
        if self.connected:
            self.socket.send("/rooms".encode('utf-8'))
    
    def refresh_logs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞)"""
        self.add_to_logs("--- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–≥–æ–≤ ---")
    
    def clear_stats(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.metrics_text.config(state='normal')
        self.metrics_text.delete(1.0, tk.END)
        self.metrics_text.config(state='disabled')
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.logs_text.config(state='normal')
        self.logs_text.delete(1.0, tk.END)
        self.logs_text.config(state='disabled')
    
    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            filename = f"server_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.logs_text.get(1.0, tk.END))
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏: {e}")
    
    def send_system_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = tk.simpledialog.askstring("–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        if message and self.connected:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ –ª–æ–≥–∏
            self.add_to_logs(f"[–°–ò–°–¢–ï–ú–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï] {message}")
    
    def send_user_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        selection = self.users_listbox.curselection()
        if not selection:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        username = self.users_listbox.get(selection[0])
        message = tk.simpledialog.askstring("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {username}:")
        if message and self.connected:
            self.socket.send(f"/msg {username} {message}".encode('utf-8'))
    
    def disconnect_user(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_listbox.curselection()
        if not selection:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        username = self.users_listbox.get(selection[0])
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}?"):
            self.add_to_logs(f"[–ê–î–ú–ò–ù] –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    def ban_user(self):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_listbox.curselection()
        if not selection:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        username = self.users_listbox.get(selection[0])
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}?"):
            self.add_to_logs(f"[–ê–î–ú–ò–ù] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    def user_stats(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        selection = self.users_listbox.curselection()
        if not selection:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        username = self.users_listbox.get(selection[0])
        messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}\n\n–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def create_room(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã"""
        room_name = self.new_room_entry.get().strip()
        if not room_name:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã")
            return
        
        if self.connected:
            self.socket.send(f"/create {room_name}".encode('utf-8'))
            self.new_room_entry.delete(0, tk.END)
    
    def delete_room(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã"""
        selection = self.rooms_listbox.curselection()
        if not selection:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        room_name = self.rooms_listbox.get(selection[0])
        if room_name == "general":
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É 'general'")
            return
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–£–¥–∞–ª–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É '{room_name}'?"):
            self.add_to_logs(f"[–ê–î–ú–ò–ù] –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã: {room_name}")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    
    def restart_server(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã."):
            self.add_to_logs("[–ê–î–ú–ò–ù] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    
    def shutdown_server(self):
        """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–í—ã–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä?\n–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã."):
            self.add_to_logs("[–ê–î–ú–ò–ù] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.update_server_info()
    
    def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if hasattr(self, 'monitor_job'):
            self.root.after_cancel(self.monitor_job)
    
    def update_server_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ"""
        if self.connected:
            current_time = datetime.now().strftime('%H:%M:%S')
            self.server_info_label.config(text=f"–°–µ—Ä–≤–µ—Ä: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ | –í—Ä–µ–º—è: {current_time}")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        self.monitor_job = self.root.after(1000, self.update_server_info)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.root.mainloop()

if __name__ == "__main__":
    admin_panel = AdminControlPanel()
    admin_panel.run()